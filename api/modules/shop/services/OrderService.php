<?php


namespace api\modules\shop\services;


use api\modules\shop\caches\OrderCache;
use api\modules\shop\forms\OrderForm;
use api\modules\shop\models\CustomerAddress;
use api\modules\shop\models\Goods;
use api\modules\shop\models\Order;
use api\modules\shop\models\OrderGoods;
use api\modules\shop\resources\OrderResource;
use api\modules\shop\search\OrderSearch;
use common\helpers\BaseHelper;
use yii\base\UserException;
use yii\helpers\ArrayHelper;
use yii\helpers\Json;

class OrderService extends Service
{
    /**
     * @var string
     */
    public $formClass = OrderForm::class;

    /**
     * @var string
     */
    public $resourceClass = OrderResource::class;

    /**
     * @var string
     */
    public $searchClass = OrderSearch::class;

    /**
     * @param array $params
     * @return OrderCache
     * @throws UserException
     */
    public function index($params = [])
    {
        return new OrderCache([
            'provider' =>  parent::index($params),
            'params' => $params
        ]); // TODO: Change the autogenerated stub
    }

    /**
     * @param array $data
     * @return OrderForm
     * @throws UserException
     */
    public function store($data = [])
    {
        return parent::store($data); // TODO: Change the autogenerated stub
    }

    /**
     * @param array $data
     * @return OrderForm
     * @throws UserException
     */
    public function update($data = [])
    {
        return parent::update($data); // TODO: Change the autogenerated stub
    }

    /**
     * @param array $data
     * @return OrderForm
     * @throws UserException
     */
    public function destroy($data = [])
    {
        return parent::destroy($data); // TODO: Change the autogenerated stub
    }

    /**
     * @param array $data
     * @return OrderForm|array
     * @throws UserException
     * @throws \yii\base\Exception
     */
    public function create($data = [])
    {
        $form = $this->formValidate($data, OrderForm::CREATE);
        if ($form->hasErrors()) {
            return $form;
        }

        $addressInfo = CustomerAddress::findOne($form->address_id);
        list($goodsList, $goodsInfo) = self::getBookData($form->address_id, $form->order_id);

        if (!$goodsList) {
            return [];
        }

        $tran = Order::getDb()->beginTransaction();
        try {
            if ($form->order_id) {
                $order = $this->update([
                    'id' => $form->order_id,
                    'customer_id' => $addressInfo->customer_id,
                    'address_id' => $addressInfo->id,
                    'consignee' => $addressInfo->consignee,
                    'contact_tel' => $addressInfo->contact_tel,
                    'address' => $addressInfo->address,
                    'amount' => $goodsInfo['total_price'],
                    'remark' => '',
                    'status' => 0
                ]);
                OrderGoods::updateAll(['is_del'=>OrderGoods::IS_DEL_YES, 'updated_at'=>time()], ['order_id'=>$form->order_id]);
            } else {
                $order = $this->store([
                    'order_no' => self::getOrderNo(),
                    'customer_id' => $addressInfo->customer_id,
                    'address_id' => $addressInfo->id,
                    'consignee' => $addressInfo->consignee,
                    'contact_tel' => $addressInfo->contact_tel,
                    'address' => $addressInfo->address,
                    'amount' => $goodsInfo['total_price'],
                    'remark' => '',
                    'status' => 0
                ]);
            }

            $addData = [];
            foreach ($goodsList as $item) {
                $addData[] = [
                    'order_id' => $order->id,
                    'goods_id' => $item['goods_id'],
                    'name' => $item['name'],
                    'number' => $item['number'],
                    'unit' => $item['unit'],
                    'format' => $item['format'],
                    'purchase_price' => $item['purchase_price'],
                    'price' => $item['price'],
                    'book_num' => $item['book_num'],
                    'product_date' => $item['product_date'],
                    'shelf_life' => $item['shelf_life']
                ];
            }

            $service = new OrderGoodsService();
            foreach ($addData as $item) {
                $service->store($item);
            }
            $tran->commit();
        } catch (\Exception $e) {
            $tran->rollBack();
            throw new UserException($e->getMessage());
        }

        \Yii::$app->redis->del(self::bookCar($form->address_id, $order->id));

        return [];
    }

    /**
     * @param array $data
     * @return OrderForm|array
     * @throws UserException
     */
    public function changeStatus($data = [])
    {
        /** @var OrderForm $form */
        $form = $this->idForm($data['id']);
        $form->setScenario($form::CHANGE_STATUS);
        $form->load($data, '');
        if (!$form->save()) {
            return $form;
        }

        if ($form->status == Order::STATUS_REFUSE) {
            $list = OrderGoods::findAll(['order_id' => $form->id]);
            $service = new GoodsService();
            foreach ($list as $item) {
                $service->addStock([
                    'id' => $item->goods_id,
                    'stock' => $item->book_num
                ]);
            }
        }

        return [];
    }

    /**
     * 要更新的订单的信息
     * @param array $params
     * @return array
     * @throws UserException
     */
    public function updateInfo($params = [])
    {
        /** @var Order $order */
        $order = parent::show($params['id']);

        $service = new OrderGoodsService();
        /** @var OrderGoods[] $goodsList */
        $goodsList = $service->index(['order_id'=>$params['id'], 'no_page'=>1])->getModels()?:[];

        $list = [];
        $listNextId = 1;
        $totalPrice = 0;
        foreach ($goodsList as $item) {
            $total = bcmul($item->book_num, $item->price, 2);
            $list[$listNextId] = [
                'name' => $item->name,
                'number' => $item->number,
                'unit' => $item->unit,
                'format' => $item->format,
                'purchase_price' => $item->purchase_price,
                'product_date' => $item->product_date,
                'shelf_life' => $item->shelf_life,
                'goods_id' => $item->goods_id,
                'book_num' => $item->book_num,
                'price' => number_format($item->price, 2),
                'total' => number_format($total, 2),
                'id' => $listNextId
            ];
            $totalPrice = bcadd($totalPrice, $total, 2);
            $listNextId++;
        }

        $info = [
            'total_price' => $totalPrice,
            'next_id' => $listNextId,
        ];

        $bookCar = self::bookCar($params['address_id'], $order->id);

        self::bookCarSave($bookCar, $list, $info);

        return [];
    }

    /**
     * @param array $data
     * @return OrderForm|array
     * @throws UserException
     */
    public function bookGoods($data = [])
    {
        $form = $this->formValidate($data, OrderForm::BOOK_GOODS);
        if ($form->hasErrors()) {
            return $form;
        }

        $goods = Goods::find()->notDelete()->andWhere(['id' => $form->goods_id])->one();
        if (!$goods) {
            throw new UserException('商品已下架');
        }

        list($list, $info) = self::getBookData($form->address_id, $form->order_id);

        // 收货地址的订货缓存标识
        $bookCar = self::bookCar($form->address_id, $form->order_id);

        // 商品总价
        $total = bcmul($form->price, $form->book_num, 2);

        $listNextId = $info['next_id'] ?? 1;
        $totalPrice = isset($info['total_price']) ? bcadd($info['total_price'], $total, 2) : $total;
        $orderGoods = array_merge($goods->toArray([
            'name',
            'number',
            'unit',
            'format',
            'purchase_price',
            'product_date',
            'shelf_life',
        ]), [
            'goods_id' => $form->goods_id,
            'book_num' => $form->book_num,
            'price' => number_format($form->price, 2),
            'total' => number_format($total, 2),
            'id' => $listNextId
        ]);
        $list[$listNextId] = $orderGoods;
        $info = [
            'total_price' => $totalPrice,
            'next_id' => $listNextId + 1
        ];

        self::bookCarSave($bookCar, $list, $info);

        return [];
    }

    /**
     * @param array $data
     * @return OrderForm|array
     * @throws UserException
     * @throws \Exception
     */
    public function bookClear($data = [])
    {
        $form = $this->formValidate($data, OrderForm::BOOK_CLEAR);
        if ($form->hasErrors()) {
            return $form;
        }
        $bookCar = self::bookCar($form->address_id, $form->order_id);
        if (!$form->book_id) {
            \Yii::$app->redis->del($bookCar);
            return [];
        }

        list($list, $info) = self::getBookData($form->address_id, $form->order_id);

        $data = ArrayHelper::getValue($list, $form->book_id);
        if ($data) {
            $info['total_price'] = number_format(bcsub($info['total_price'], -$data['total']), 2);
        }

        unset($list[$form->book_id]);

        self::bookCarSave($bookCar, $list, $info);

        return [];
    }

    /**
     * @param array $data
     * @return OrderForm|array
     * @throws UserException
     * @throws \Exception
     */
    public function bookUpdate($data = [])
    {
        $form = $this->formValidate($data, OrderForm::BOOK_UPDATE);
        if ($form->hasErrors()) {
            return $form;
        }

        $bookCar = self::bookCar($form->address_id, $form->order_id);
        list($list, $info) = self::getBookData($form->address_id, $form->order_id);

        $data = ArrayHelper::getValue($list, $form->book_id);
        if (!$data) {
            return [];
        }
        // 商品总价
        $total = (($form->price * 100) * ($form->book_num * 100)) / 100;

        $info['total_price'] = number_format(bcsub($info['total_price'], $data['total']), 2);

        $data['book_num'] = $form->book_num;
        $data['price'] = number_format($form->price, 2);
        $data['total'] = BaseHelper::pennyToYuan($total);

        $list[$form->book_id] = $data;

        self::bookCarSave($bookCar, $list, $info);

        return [];
    }

    /**
     * @param array $params
     * @return array
     * @throws \Exception
     */
    public function bookList($params = [])
    {
        list($list, $info) = self::getBookData($params['address_id'], $params['order_id']??0);
        krsort($list);

        return [
            'list' => array_values($list),
            'total_price' => ArrayHelper::getValue($info, 'total_price', '0.00'),
        ];
    }

    /**
     * @param array $params
     * @return mixed|null
     * @throws \Exception
     */
    public function bookShow($params = [])
    {
        $list = self::getBookData($params['address_id'], $params['order_id']??0)[0];

        return ArrayHelper::getValue($list, $params['book_id'], []);
    }

    /**
     * 获取下订数据
     * @param int $addressId
     * @param int $orderId
     * @return array[]
     */
    public static function getBookData($addressId, $orderId = 0)
    {
        $bookCar = self::bookCar($addressId, $orderId);
        list($list, $info) = \Yii::$app->redis->hmget($bookCar, 'list', 'info');
        $list = $list ? Json::decode($list) : [];
        $info = $info ? Json::decode($info) : [];

        return [$list, $info];
    }

    /**
     * 购物车缓存key
     * @param $addressId
     * @param int $orderId
     * @return string
     */
    public static function bookCar($addressId, $orderId = 0)
    {
        $car = 'BOOK_CAR:' . $addressId;
        if ($orderId) {
            $car .= '_'.$orderId;
        }
        return $car;
    }

    /**
     * @param string $key
     * @param array $list
     * @param array $info
     */
    public static function bookCarSave($key, $list, $info)
    {
        \Yii::$app->redis->hmset($key, 'list', Json::encode($list), 'info', Json::encode($info));
    }

    /**
     * 获取订单号
     * @return string
     */
    public static function getOrderNo()
    {
        $prefix = date('Ymd');
        $orderNoArr = Order::find()
            ->select('order_no')
            ->andWhere(['LIKE', 'order_no', $prefix . '%', false])
            ->orderBy('order_no ASC')
            ->column() ?: [];

        do {
            $orderNo = $prefix . mt_rand(1111, 9999);
        } while (in_array($orderNo, $orderNoArr));

        return $orderNo;
    }

    /**
     * 打印的数据集合
     * @param array $data
     * @return array
     * @throws UserException
     * @throws \Exception
     */
    public function printData($data = [])
    {
        $order = Order::findOne($data['id']);
        if (!$order) {
            throw new UserException('订单不存在');
        }

        $provider = [
            'name_split' => '健 健 综 合 店',
            'name' => '健健综合店',
            'address' => '城北门街三幢102号',
            'tel' => '0763-2214016',
            'printer' => ArrayHelper::getValue(\Yii::$app->user->identity, 'name', '')
        ];

        $customer = CustomerAddress::findOne($order->address_id)->toArray(['consignee', 'contact_tel', 'address']);

        $service = new OrderGoodsService();
        $goodsList = $service->index([
            'order_id' => $order->id,
            'no_page' => 1
        ])->getModels();

        $totalGoods = count($goodsList);
        if ($totalGoods < 7) {
            $forLen = 7 - $totalGoods;
            for ($i = 0; $i < $forLen; $i++) {
                $goodsList[] = [];
            }
        }

        $orderData = [
            'amount' => $order->amount,
            'amount_chn' => BaseHelper::convertAmountToChn($order->amount),
            'create_date' => date('Y-m-d', $order->created_at),
            'print_date' => date('Y-m-d'),
            'order_no' => $order->order_no,
            'total_goods' => $totalGoods
        ];

        return [
            'provider' => $provider,
            'customer' => $customer,
            'order_data' => $orderData,
            'goods_list' => $goodsList
        ];
    }

    /**
     * @param array $data
     * @param null $scenes
     * @return OrderForm
     * @throws \yii\base\UserException
     */
    public function formValidate($data = [], $scenes = null)
    {
        return parent::formValidate($data, $scenes); // TODO: Change the autogenerated stub
    }
}