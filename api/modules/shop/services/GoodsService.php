<?php


namespace api\modules\shop\services;


use api\modules\shop\caches\GoodsCache;
use api\modules\shop\forms\GoodsForm;
use api\modules\shop\models\Goods;
use api\modules\shop\resources\GoodsResource;
use api\modules\shop\search\GoodsSearch;
use yii\base\UserException;
use yii\data\ActiveDataProvider;

class GoodsService extends Service
{
    /**
     * @var string
     */
    public $formClass = GoodsForm::class;

    /**
     * @var string
     */
    public $searchClass = GoodsSearch::class;

    /**
     * @var string
     */
    public $resourceClass = GoodsResource::class;

    /**
     * 商品单位列表
     * @param array $params
     * @return GoodsCache
     * @throws UserException
     */
    public function index($params = [])
    {
        return new GoodsCache([
            'provider' => parent::index($params),
            'params' => $this->mergeData($params)
        ]); // TODO: Change the autogenerated stub
    }

    /**
     * 商品单位详情
     * @param int $id
     * @return GoodsResource
     * @throws UserException
     */
    public function show($id)
    {
        return parent::show($id); // TODO: Change the autogenerated stub
    }

    /**
     * 添加商品单位
     * @param array $data
     * @return GoodsForm
     * @throws UserException
     */
    public function store($data = [])
    {
        /** @var GoodsForm $form */
        $form = parent::store($data); // TODO: Change the autogenerated stub

        (new GoodsCategoryRelationService())->setRelation($form->id, $form->category);

        return $form;
    }

    /**
     * 更新商品单位
     * @param array $data
     * @return GoodsForm
     * @throws UserException
     */
    public function update($data = [])
    {
        /** @var GoodsForm $form */
        $form = parent::update($data); // TODO: Change the autogenerated stub

        (new GoodsCategoryRelationService())->setRelation($form->id, $form->category);

        return $form;
    }

    /**
     * 删除商品单位
     * @param array $data
     * @return GoodsForm
     * @throws UserException
     */
    public function destroy($data = [])
    {
        return parent::destroy($data); // TODO: Change the autogenerated stub
    }

    /**
     * 扣减库存
     * @param array $data
     * @return GoodsForm
     * @throws UserException
     */
    public function deductStock($data = [])
    {
        $form = $this->formValidate($data, GoodsForm::DEDUCT_STOCK);
        if ($form->hasErrors()) {
            return $form;
        }

        $goods = Goods::findOne($form->id);

        // 库存不能减扣就不扣了
        if ($goods->stock <= 0) {
            return $form;
        }

        $remaining = bcsub($goods->stock, $form->stock, 2);
        if ( $remaining <= 0 ) {
            $goods->stock = 0;
        } else {
            $goods->stock = $remaining;
        }

        if (!$goods->save()) {
            \Yii::error($goods->getFirstErrors());
            $form->addErrors($goods->errors);
        }

        return $form;
    }

    /**
     * 增加库存
     * @param array $data
     * @return GoodsForm
     * @throws UserException
     */
    public function addStock($data = [])
    {
        $form = $this->formValidate($data, GoodsForm::ADD_STOCK);
        if ($form->hasErrors()) {
            return $form;
        }

        $goods = Goods::findOne($form->id);

        // 库存不能减扣就不扣了
        if (!$goods || $goods->stock < 0) {
            return $form;
        }

        $goods->stock = bcadd($goods->stock, $form->stock, 2);

        if (!$goods->save()) {
            \Yii::error($goods->getFirstErrors());
            $form->addErrors($goods->errors);
        }

        return $form;
    }

    /**
     * @param array $data
     * @param null $scenes
     * @return GoodsForm
     * @throws UserException
     */
    public function formValidate($data = [], $scenes = null)
    {
        return parent::formValidate($data, $scenes); // TODO: Change the autogenerated stub
    }
}