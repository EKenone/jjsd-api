<?php


namespace api\modules\admin\services;


use api\modules\admin\forms\AdminForm;
use api\modules\admin\logic\AdminLoginLogic;
use api\modules\admin\resources\AdminResource;
use api\modules\admin\search\AdminSearch;
use yii\base\UserException;
use yii\data\ActiveDataProvider;

/**
 * Class AdminService
 * @package api\modules\admin\services
 *
 * @property AdminForm $form
 */
class AdminService extends Service
{
    /**
     * @var string
     */
    public $formClass = AdminForm::class;

    /**
     * @var string
     */
    public $resourceClass = AdminResource::class;

    /**
     * @var string
     */
    public $searchClass = AdminSearch::class;

    /**
     * 管理员列表
     * @param array $params
     * @return array|ActiveDataProvider
     * @throws UserException
     */
    public function index($params = [])
    {
        return parent::index($params); // TODO: Change the autogenerated stub
    }

    /**
     * 添加管理员
     * @param array $data
     * @return array
     * @throws UserException
     */
    public function store($data = [])
    {
        /** @var AdminForm $form */
        $form = parent::store($data); // TODO: Change the autogenerated stub

        $service = new AdminRoleService();
        foreach ($form->role_id as $role_id) {
            $service->store([
                'admin_id' => $form->id,
                'role_id' => $role_id
            ]);
        }

        return [];
    }

    /**
     * 更新管理员
     * @param array $data
     * @return array
     * @throws UserException
     */
    public function update($data = [])
    {
        /** @var AdminForm $form */
        $form = parent::update($data); // TODO: Change the autogenerated stub

        $service = new AdminRoleService();
        $oldRoleIds = $service->getAdminRoleId($form->id);

        $add = array_diff($form->role_id, $oldRoleIds);
        $del = array_diff($oldRoleIds, $form->role_id);

        if (!$del) {
            $service->delByWhere(['admin_id' => $form->id, 'role_id' => $del]);
        }

        foreach ($add as $item) {
            $service->store([
                'admin_id' => $form->id,
                'role_id' => $item
            ]);
        }

        return [];
    }

    /**
     * 删除管理员
     * @param array $data
     * @return array
     * @throws UserException
     */
    public function destroy($data = [])
    {
        parent::destroy($data); // TODO: Change the autogenerated stub

        return [];
    }

    /**
     * 用户登录
     * @param array $data
     * @return AdminForm|array|AdminLoginLogic
     * @throws UserException
     */
    public function login($data = [])
    {
        $form = $this->formValidate($data, AdminForm::SCENARIO_LOGIN);
        if ($form->hasErrors()) {
            return $form;
        }

        $logic = (new AdminLoginLogic(['form' => $form]))->done();
        if ($logic->hasErrors()) {
            return $logic;
        }

        return $logic->getResult();
    }

    /**
     * @return array
     */
    public function logout()
    {
        return [];
    }

    /**
     * @param array $data
     * @param null $scenes
     * @return AdminForm
     * @throws UserException
     */
    public function formValidate($data = [], $scenes = null)
    {
        return parent::formValidate($data, $scenes); // TODO: Change the autogenerated stub
    }
}