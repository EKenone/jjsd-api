<?php


namespace api\modules\admin\services;


use api\components\ActiveRecord;
use api\modules\admin\forms\RolePermissionForm;
use api\modules\admin\models\RolePermission;
use api\modules\admin\resources\RolePermissionResource;
use common\helpers\BaseHelper;

class RolePermissionService extends Service
{
    /**
     * @var string
     */
    public $formClass = RolePermissionForm::class;

    /**
     * @var string
     */
    public $resourceClass = RolePermissionResource::class;

    /**
     * @param array $data
     * @return RolePermissionForm
     * @throws \yii\base\UserException
     */
    public function store($data = [])
    {
        return parent::store($data); // TODO: Change the autogenerated stub
    }

    /**
     * 创建用户权限
     * @param array $data
     * @return RolePermissionForm|array
     * @throws \yii\base\UserException
     */
    public function batchCreate($data = [])
    {
        $form = $this->formValidate($data, RolePermissionForm::BATCH_CREATE);
        if ($form->hasErrors()) {
            return $form;
        }

        $roleMenu = $this->rolePermissionMenu($form->role_id);

        $add = array_diff($form->menu_ids, $roleMenu);
        $del = array_diff($roleMenu, $form->menu_ids);

        if (!$del) {
            RolePermission::updateAll(['is_del' => ActiveRecord::IS_DEL_YES], ['role_id' => $form->role_id, 'menu_id' => $del]);
        }

        foreach ($add as $item) {
            $this->store([
                'role_id' => $form->role_id,
                'menu_id' => $item
            ]);
        }

        return [];
    }

    /**
     * 获取角色拥有的菜单权限
     * @param $roleId
     * @return array
     */
    public function rolePermissionMenu($roleId)
    {
        return RolePermission::find()
            ->select('menu_id')
            ->notDelete()
            ->andWhere(['role_id' => $roleId])
            ->column();
    }

    /**
     * @param $roleIds
     * @return array
     */
    public function adminRoleMenu($roleIds)
    {
        $roleMenu = RolePermissionResource::find()
            ->innerJoinWith(['menu menu'])
            ->notDelete()
            ->andWhere(['role_id' => $roleIds, 'menu.is_del' => ActiveRecord::IS_DEL_NO])
            ->orderBy(['menu.sort'=>SORT_DESC])
            ->all();

        $header = $aside = [];

        foreach ($roleMenu as $menu) {
            if ($menu->menu->pid == 0) {
                $header[] = $menu->setFieldType(RolePermissionResource::ADMIN_ROLE_MENU)->toArray();
            }
            $aside[] = $menu->setFieldType(RolePermissionResource::ADMIN_ROLE_MENU)->toArray();

        }
        \Yii::error($aside);
        return [
            'header' => $header,
            'aside' => array_values(BaseHelper::tree($aside))
        ];
    }

    /**
     * @param array $data
     * @param null $scenes
     * @return RolePermissionForm
     * @throws \yii\base\UserException
     */
    public function formValidate($data = [], $scenes = null)
    {
        return parent::formValidate($data, $scenes); // TODO: Change the autogenerated stub
    }
}