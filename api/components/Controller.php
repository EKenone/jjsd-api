<?php


namespace api\components;


use api\esmodels\OperateLog;
use api\services\interfaces\CurdInterface;
use api\services\ServiceAbstract;
use sizeg\jwt\JwtHttpBearerAuth;
use yii\base\Action;
use yii\base\InvalidConfigException;
use yii\filters\ContentNegotiator;
use yii\helpers\ArrayHelper;
use yii\helpers\Json;
use yii\web\Response;

/**
 * Class Controller
 * @package api\components
 *
 * @property CurdInterface $service
 */
class Controller extends \yii\rest\Controller
{
    /**
     * @var string 服务类
     */
    public $serviceClass = '';

    /**
     * @var ServiceAbstract|null
     */
    public $service = null;

    /**
     * @var string|array
     */
    public $serializer = 'api\components\Serializer';

    /**
     * @throws InvalidConfigException
     */
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        if ($this->serviceClass) {
            $this->service = \Yii::createObject($this->serviceClass);
        }
    }

    /**
     * @return array|array[]
     */
    public function behaviors()
    {
        return array_merge(parent::behaviors(), [
            'contentNegotiator' => [
                'class' => ContentNegotiator::class,
                'formats' => [
                    'application/json' => Response::FORMAT_JSON,
                ],
            ],
            'authenticator' => [
                'class' => JwtHttpBearerAuth::class,
                'optional' => [
                    'login',
                ],
            ],
        ]); // TODO: Change the autogenerated stub
    }

    /**
     * @param Action $action
     * @param mixed $result
     * @return mixed
     * @throws InvalidConfigException
     */
    public function afterAction($action, $result)
    {
        $result = parent::afterAction($action, $result); // TODO: Change the autogenerated stub/
        return self::esLog($result);
    }

    /**
     * 请求记录记录到es
     * @param $result
     * @return mixed
     * @throws InvalidConfigException
     */
    public static function esLog($result)
    {
//        $log = new OperateLog();
//        $log->operation_id = \Yii::$app->user->id;
//        $log->operation_name = ArrayHelper::getValue(\Yii::$app->user->identity, 'name', '');
//        $log->request_data = ['get' => \Yii::$app->request->get(), 'post' => \Yii::$app->request->post()];
//        $log->request_time = date('Y-m-d');
//        $log->uri = \Yii::$app->request->getPathInfo();
//        $log->ip = \Yii::$app->request->getUserIP();
//        $log->response_data = Json::encode($result);
//        $log->response_time = date('Y-m-d');
//        $log->user_ip = \Yii::$app->request->getHeaders()->get('x-real-ip');
//        $log->save();

        return $result;
    }

}