<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2020/6/19
 * Time: 10:51
 */
namespace common\traits;

use common\helpers\BaseHelper;


trait ModelFieldTypeTrait
{
    /**
     * 是否合并基础字段，默认是合并的
     *
     * 例：如果不需要合并base
     *
     * public function indexField() {
     *      self::$mergeBase = false; // 这里把mergeBase设置就可以了
     *      return [
     *          your fields
     *      ];
     * }
     *
     *
     * @var bool
     */
    public static $mergeBase = true;

    /**
     * 选用的场景字段的类型，虽然有expand字段可以过滤，
     * 但是还是觉得放到一个资源模型里面管理比较好，但是
     * 要防止资源模型过渡臃肿，大概就是不要超过500行吧
     *
     * 例：index，那就会加载indexField的资源字段
     *
     * @var string
     */
    public static $fieldType;

    /**
     * 设置字段类型
     * @param $type
     * @return $this
     */
    public function setFieldType( $type )
    {
        static::$fieldType = $type;

        return $this;
    }

    /**
     * 通用的fields方法
     * @return array|false|mixed
     */
    public function fields()
    {
        $method = BaseHelper::convertUnderline(static::$fieldType).'Field';

        if ( !method_exists($this, $method) ) {// 如果不存在方法，就返回模型的默认返回字段
            return parent::fields(); // TODO: Change the autogenerated stub
        }

        if (!self::$mergeBase) {// 如果不需要合并基础的字段
            return call_user_func([$this, $method]);
        }

        return array_merge($this->base(),  call_user_func([$this, $method]));
    }

    /**
     * 通用的删除方法
     * @return bool
     */
    public function destroy()
    {
        if (is_array($this->id)) {
            return self::updateAll(['is_del' => self::IS_DEL_YES, 'updated_at' => time()], ['id' => $this->id]);
        }
        $this->is_del = self::IS_DEL_YES;
        return $this->save();
    }

    /**
     * 基础字段，每个场景field都一定会有的
     *
     * 建议：如果不是非常熟悉业务的话，我还是不建议用这个方法的，
     * 当熟悉业务之后，可以归纳统一，可以一定程度减少资源模型的臃肿
     * 依赖$mergeBase变量，有一点就是尽量不要把有db操作放到这里面
     *
     * @return array
     */
    public function base()
    {
        return [];
    }
}